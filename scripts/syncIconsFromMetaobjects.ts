#!/usr/bin/env tsx
import 'dotenv/config';
import fs from 'fs';
import path from 'path';
import { GraphQLClient, gql } from 'graphql-request';
import seoPages from '../data/seo-pages.json';
import { getAllCollections } from '../lib/shopify';

async function fetchMetaobjects(type: string) {
  const domain = process.env.SHOPIFY_STORE_DOMAIN!;
  const token = process.env.SHOPIFY_ADMIN_API_TOKEN!;
  const version = process.env.SHOPIFY_API_VERSION!;
  const client = new GraphQLClient(
    `https://${domain}/admin/api/${version}/graphql.json`,
    { headers: { 'X-Shopify-Access-Token': token } }
  );
  const query = gql`
    query($first: Int!) {
      metaobjects(type: "${type}", first: $first) {
        edges {
          node {
            handle
            fields { key value }
          }
        }
      }
    }
  `;
  const data: any = await client.request(query, { first: 250 });
  return data.metaobjects.edges.map((e: any) => e.node);
}

async function main() {
  const assetsMap: Record<string, { title: string; caption: string; hover: string }> = {};
  const altsMap: Record<string, string> = {};

  // Local SEO pages
  for (const page of seoPages) {
    const image = page.seo?.image;
    if (image) {
      assetsMap[page.slug] = { title: image, caption: image, hover: "" };
      altsMap[page.slug] = page.seo.title;
    }
  }

  // Shopify collections
  const collections = await getAllCollections();
  for (const col of collections) {
    if (col.image) {
      assetsMap[col.handle] = { title: col.image, caption: col.image, hover: "" };
      altsMap[col.handle] = col.title;
    }
  }

  // Metaobjects (SEO pages and featured snipers)
  const seoObjs = await fetchMetaobjects('seo_page');
  const featObjs = await fetchMetaobjects('featured_sniper');
  for (const node of [...seoObjs, ...featObjs]) {
    const slug = node.handle;
    const imgField = node.fields.find((f: any) => f.key === 'image');
    if (imgField) {
      let url: string;
      try { url = JSON.parse(imgField.value).url; }
      catch { url = imgField.value; }
      assetsMap[slug] = { title: url, caption: url, hover: "" };
    }
    const altField = node.fields.find((f: any) => f.key === 'altText' || f.key === 'alt');
    altsMap[slug] = altField?.value || slug.replace(/-/g, ' ');
  }

  // Default fallback
  assetsMap.default = { title: 'https://cdn.shopify.com/s/files/1/.../default-icon.svg', caption: 'https://cdn.shopify.com/s/files/1/.../default-icon.svg', hover: '' };
  altsMap.default = 'Default icon';

  // Write ICONS map
  const assetsFile = path.resolve(__dirname, '../lib/assets.ts');
  const content1 = `// Auto-generated by syncIconsFromMetaobjects.ts\nexport interface IconMeta { title: string; caption: string; hover: string; }\nexport const ICONS: Record<string, IconMeta> = ${JSON.stringify(assetsMap, null, 2)};\n`;
  fs.writeFileSync(assetsFile, content1);

  // Write ICON_ALTS map
  const altsFile = path.resolve(__dirname, '../lib/assetsAlt.ts');
  const content2 = `// Auto-generated by syncIconsFromMetaobjects.ts\nexport const ICON_ALTS: Record<string,string> = ${JSON.stringify(altsMap, null, 2)};\n`;
  fs.writeFileSync(altsFile, content2);

  console.log('âœ… lib/assets.ts and lib/assetsAlt.ts have been updated.');
}

main().catch(err => { console.error(err); process.exit(1); });
